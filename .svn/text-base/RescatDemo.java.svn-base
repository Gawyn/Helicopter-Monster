
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import aima.search.framework.Problem;
import aima.search.framework.Search;
import aima.search.framework.SearchAgent;
import aima.search.informed.HillClimbingSearch;
import aima.search.informed.SimulatedAnnealingSearch;



public class RescatDemo {
    private static int paramk;
    public static void main(String[] args){
        paramk=15;
        //for(int j=0;j<5;j++){
            for(int i=0;i<10;i++){
                    RescatBoard RB=new RescatBoard(100,15,paramk);
                    RescatHeuristicFunction2 rhf=new RescatHeuristicFunction2();
                    //System.out.println("* Temps emprat pel rescat: "+rhf.getHeuristicValue(RB));
                    //RHillClimbingSearch(RB);
                    RSimulatedAnnealingSearch(RB);
            }
        paramk+=5;
        //}
    }
    
    private static void RHillClimbingSearch(RescatBoard RB) {
      //System.out.println("\n#######################");
      //System.out.println("# Rescat HillClimbing #");
      //System.out.println("#######################");
        long ini, fi;
        try {
            Problem problem =  new Problem(RB,new RescatSuccessorFunction(), new RescatGoalTest(),new RescatHeuristicFunction2());
            Search search =  new HillClimbingSearch();
            ini = System.currentTimeMillis();
            SearchAgent agent = new SearchAgent(problem,search);
            fi = System.currentTimeMillis();
            //System.out.println();
            //printActions(agent.getActions());
            //printInstrumentation(agent.getInstrumentation());
            RescatHeuristicFunction2 HF = new RescatHeuristicFunction2();
            RescatBoard rescat = ((RescatBoard) ((HillClimbingSearch) search).getLastSearchState());
            double h1 = HF.getHeuristicValue(rescat);

            int nodes = Integer.parseInt( (String) agent.getInstrumentation().get("nodesExpanded"));
            int steps = agent.getActions().size();
            System.out.print("HC(100,10) Hill Climbing | ");
            System.out.print(h1);
            double tempsdarrer=RB.getTempsDarrer();
            System.out.print(" | " + tempsdarrer );
            double tempstotal=RB.getTempsTotal();
            System.out.print(" | " + tempstotal );
            System.out.print(" | " + (fi - ini));
            System.out.print(" | " + steps);
            System.out.println(" | " + paramk);
            //RB.ShowSortides();

            //rescat.ShowSortides();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
    private static void RSimulatedAnnealingSearch(RescatBoard RB) {
            long ini, fi;

        try {
            Problem problem =  new Problem(RB,new RescatSuccessorFunctionSA(), new RescatGoalTest(),new RescatHeuristicFunction2());

            SimulatedAnnealingSearch search =  new SimulatedAnnealingSearch(4000,140,30,0.008);
            //search.traceOn();
            ini = System.currentTimeMillis();
            SearchAgent agent = new SearchAgent(problem,search);
            fi = System.currentTimeMillis();

            //System.out.println();
            //printActions(agent.getActions());
            //printInstrumentation(agent.getInstrumentation());
            RescatHeuristicFunction2 HF = new RescatHeuristicFunction2();
            RescatBoard rescat = ((RescatBoard) ((SimulatedAnnealingSearch) search).getLastSearchState());
            double h1 = HF.getHeuristicValue(rescat);

            int steps = agent.getActions().size();

            System.out.print("HC(100,10) SA | ");
            System.out.print(h1);
            double tempsdarrer=RB.getTempsDarrer();
            System.out.print(" | " + tempsdarrer );
            double tempstotal=RB.getTempsTotal();
            System.out.print(" | " + tempstotal );
            System.out.print(" | " + (fi - ini));
            System.out.print(" | " + steps);
            System.out.println(" | " + paramk);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void printInstrumentation(Properties properties) {
        Iterator keys = properties.keySet().iterator();
        while (keys.hasNext()) {
            String key = (String) keys.next();
            String property = properties.getProperty(key);
            System.out.println(key + " : " + property);
        }
        
    }
    
    private static void printActions(List actions) {
        for (int i = 0; i < actions.size(); i++) {
            String action = (String) actions.get(i);
            System.out.println(action);
        }
    }
    
    
}


