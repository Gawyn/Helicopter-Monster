
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import aima.search.framework.Problem;
import aima.search.framework.Search;
import aima.search.framework.SearchAgent;
import aima.search.informed.HillClimbingSearch;
import aima.search.informed.SimulatedAnnealingSearch;



public class RescatDemo {
    private static int paramk;
    public static void main(String[] args){
<<<<<<< .mine
   //    for(int j=0;j<20;j++){
          voltes=voltes+500;
=======
        paramk=0;
       for(int j=0;j<1;j++){
           paramk=paramk+10;
>>>>>>> .r147
       for(int i=0; i < 10; i++){

<<<<<<< .mine
        RescatBoard RB=new RescatBoard(200,20);
=======
        RescatBoard RB=new RescatBoard(30,paramk);
>>>>>>> .r147
        //RB.ShowSortides();

        //RescatHeuristicFunction1 rhf=new RescatHeuristicFunction1();
        //System.out.println("* Temps emprat pel rescat: "+rhf.getHeuristicValue(RB));
        RHillClimbingSearch(RB);
        //RSimulatedAnnealingSearch(RB);
       }
 //       }
    }
    
    private static void RHillClimbingSearch(RescatBoard RB) {
      //System.out.println("\n#######################");
      //System.out.println("# Rescat HillClimbing #");
      //System.out.println("#######################");
<<<<<<< .mine
            long ini, fi;

=======
        long ini, fi;
>>>>>>> .r147
        try {
            Problem problem =  new Problem(RB,new RescatSuccessorFunction(), new RescatGoalTest(),new RescatHeuristicFunction1());
                        ini = System.currentTimeMillis();
            Search search =  new HillClimbingSearch();
<<<<<<< .mine
                        fi = System.currentTimeMillis();

=======
            ini = System.currentTimeMillis();
>>>>>>> .r147
            SearchAgent agent = new SearchAgent(problem,search);
            fi = System.currentTimeMillis();
            //System.out.println();
            printActions(agent.getActions());
            printInstrumentation(agent.getInstrumentation());
            RescatHeuristicFunction2 HF = new RescatHeuristicFunction2();
            RescatBoard rescat = ((RescatBoard) ((HillClimbingSearch) search).getLastSearchState());
            double h2 = HF.getHeuristicValue(rescat);

            //int nodes = Integer.parseInt( (String) agent.getInstrumentation().get("nodesExpanded"));
<<<<<<< .mine

            System.out.print("HC(200,20) HC | ");
            System.out.print(h2);
            System.out.println(" | " + (fi - ini));
=======
            int steps = agent.getActions().size();
            System.out.print("HC(200,"+paramk+") Hill Climbing | ");
            System.out.print(h1);
            System.out.print(" | " + nodes);
            System.out.print(" | " + paramk);
            System.out.print(" | " + steps);
            System.out.println(" | " + (fi - ini));
            rescat.ShowSortides();
>>>>>>> .r147
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
    private static void RSimulatedAnnealingSearch(RescatBoard RB) {
        //System.out.println("\n##############################");
        //System.out.println("# Rescat Simulated Annealing #");
        //System.out.println("##############################");

            long ini, fi;

        try {
            Problem problem =  new Problem(RB,new RescatSuccessorFunctionSA(), new RescatGoalTest(),new RescatHeuristicFunction1());

            SimulatedAnnealingSearch search =  new SimulatedAnnealingSearch(4500,110,40,0.032);
            //search.traceOn();
            ini = System.currentTimeMillis();
            SearchAgent agent = new SearchAgent(problem,search);
            fi = System.currentTimeMillis();

            //System.out.println();
            //printActions(agent.getActions());
            //printInstrumentation(agent.getInstrumentation());
            RescatHeuristicFunction1 HF = new RescatHeuristicFunction1();
            RescatBoard rescat = ((RescatBoard) ((SimulatedAnnealingSearch) search).getLastSearchState());
            double h1 = HF.getHeuristicValue(rescat);

            int steps = agent.getActions().size();

            System.out.print("SA(100,10) | ");
            System.out.print(h1);
            System.out.print(" | " + paramk);
            System.out.print(" | " + steps);
            System.out.println(" | " + (fi - ini));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void printInstrumentation(Properties properties) {
        Iterator keys = properties.keySet().iterator();
        while (keys.hasNext()) {
            String key = (String) keys.next();
            String property = properties.getProperty(key);
            System.out.println(key + " : " + property);
        }
        
    }
    
    private static void printActions(List actions) {
        for (int i = 0; i < actions.size(); i++) {
            String action = (String) actions.get(i);
            System.out.println(action);
        }
    }
    
    
}


