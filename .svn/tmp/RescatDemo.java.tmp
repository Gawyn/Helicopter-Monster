
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import aima.search.framework.Problem;
import aima.search.framework.Search;
import aima.search.framework.SearchAgent;
import aima.search.informed.HillClimbingSearch;
import aima.search.informed.SimulatedAnnealingSearch;


public class RescatDemo {
    
    public static void main(String[] args){
<<<<<<< .mine
        RescatBoard RB=new RescatBoard(10,1);
=======
        RescatBoard RB=new RescatBoard(40,5);
>>>>>>> .r138
        RB.ShowSortides();

        RescatHeuristicFunction1 rhf=new RescatHeuristicFunction1();
        System.out.println("* Temps emprat pel rescat: "+rhf.getHeuristicValue(RB));
        RHillClimbingSearch(RB);
        //RSimulatedAnnealingSearch(RB);
    }
    
    private static void RHillClimbingSearch(RescatBoard RB) {
      System.out.println("\n#######################");
      System.out.println("# Rescat HillClimbing #");
      System.out.println("#######################");

        try {
            Problem problem =  new Problem(RB,new RescatSuccessorFunction(), new RescatGoalTest(),new RescatHeuristicFunction1());
            Search search =  new HillClimbingSearch();
            SearchAgent agent = new SearchAgent(problem,search);
            
            System.out.println();
            printActions(agent.getActions());
            printInstrumentation(agent.getInstrumentation());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static void RSimulatedAnnealingSearch(RescatBoard RB) {
        System.out.println("\n##############################");
        System.out.println("# Rescat Simulated Annealing #");
        System.out.println("##############################");

        try {
            Problem problem =  new Problem(RB,new RescatSuccessorFunctionSA(), new RescatGoalTest(),new RescatHeuristicFunction1());
            SimulatedAnnealingSearch search =  new SimulatedAnnealingSearch(20,10,5,0.001);
            //search.traceOn();
            SearchAgent agent = new SearchAgent(problem,search);
            
            System.out.println();
            printActions(agent.getActions());
            printInstrumentation(agent.getInstrumentation());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void printInstrumentation(Properties properties) {
        Iterator keys = properties.keySet().iterator();
        while (keys.hasNext()) {
            String key = (String) keys.next();
            String property = properties.getProperty(key);
            System.out.println(key + " : " + property);
        }
        
    }
    
    private static void printActions(List actions) {
        for (int i = 0; i < actions.size(); i++) {
            String action = (String) actions.get(i);
            System.out.println(action);
        }
    }
    
    
}


